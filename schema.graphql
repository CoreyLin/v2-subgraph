type UniswapFactory @entity {
  # factory address 工厂合约地址用作唯一ID
  id: ID!

  # pair info 工厂合约创建的pair合约的个数
  pairCount: Int!

  # total volume 总交易量
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores 未追踪的价值-缺乏信心的USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity 总流动性
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions 区块链交易数量
  txCount: BigInt!
}

# 用于表示token0和token1
type Token @entity {
  # token address token地址
  id: ID!

  # mirrored from the smart contract 从智能合约获取
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap 用于其他数据，如市值
  totalSupply: BigInt!

  # token specific volume 该token的交易量
  tradeVolume: BigDecimal! # token交易量
  tradeVolumeUSD: BigDecimal! # token交易量，以USD计价
  untrackedVolumeUSD: BigDecimal! # 未跟踪的交易量，以USD计价

  # transactions across all pairs 跨所有pairs的交易数量
  txCount: BigInt!

  # liquidity across all pairs 跨所有pairs的流动性数量
  totalLiquidity: BigDecimal!

  # derived prices
  # 每个token值多少ETH
  derivedETH: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token") # 来源于TokenDayData
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0") # 来源于PairDayData，token0是base
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1") # 来源于PairDayData，token1是quote
  pairBase: [Pair!]! @derivedFrom(field: "token0") # 来源于Pair
  pairQuote: [Pair!]! @derivedFrom(field: "token1") # 来源于Pair
}

type Pair @entity {
  # pair address
  # pair地址作为唯一键
  id: ID!

  # mirrored from the smart contract
  # 从智能合约获取
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  # used for separating per pair reserves and global
  # 用于分离每个pair的储备和全局
  trackedReserveETH: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal! # token1的价格，注意，此处是反的
  token1Price: BigDecimal! # token0的价格

  # lifetime volume stats
  # 生命周期交易量统计
  volumeToken0: BigDecimal! # token0交易量
  volumeToken1: BigDecimal! # token0交易量
  volumeUSD: BigDecimal! # 以USD计价的交易量
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt! # 区块链交易数量

  # creation stats
  # pair合约创建统计
  createdAtTimestamp: BigInt! # 合约创建时间
  createdAtBlockNumber: BigInt! # 合约在哪个区块创建

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash 交易哈希
  blockNumber: BigInt! 区块号
  timestamp: BigInt! 时间戳
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  # 这并不是Mint.transaction的反向;它只用于跟踪未完成的mints,burns,swaps
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd ETH的价格
}

# Data accumulated and condensed into day stats for all of Uniswap
# 所有Uniswap的数据累积并压缩成日统计数据
type UniswapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  # 日交易量，以ETH计价
  dailyVolumeETH: BigDecimal!
  # 日交易量，以USD计价
  dailyVolumeUSD: BigDecimal!
  # 未跟踪日交易量
  dailyVolumeUntracked: BigDecimal!

  # 总交易量，以ETH计价
  totalVolumeETH: BigDecimal!
  # 总流动性价值，以ETH计价
  totalLiquidityETH: BigDecimal!
  # 在每笔交易中累积，而不是仅仅计算出totalVolume。使它更准确，因为它是一个实时转换
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  # 总流动性价值，以USD计价
  totalLiquidityUSD: BigDecimal!

  # 交易数量
  txCount: BigInt!
}

type PairHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
# 数据累积并浓缩为每个交易所的日统计数据
type PairDayData @entity {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # total supply for LP historical returns
  # LP历史returns的总供应量
  totalSupply: BigDecimal!

  # derived liquidity
  # 衍生流动性，以USD计价
  reserveUSD: BigDecimal!

  # volume stats
  # 交易量统计数据
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  # 日交易笔数
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}
